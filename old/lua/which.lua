require("which-key").setup {
    plugins = {
        marks = true,
        registers = false,
        spelling = {
            enabled = false,
            suggestions = 20,
        },
        presets = {
            operators = true, 
            motions = true,
            text_objects = true,
            windows = true,
            nav = true,
            z = true,
            g = true,
        },
    },
    operators = { gc = "Comments" },
    key_labels = {
        ["<Leader>"] = "SPC",
        ["<cr>"] = "RET",
        ["<tab>"] = "TAB",
    },
    icons = {
        breadcrumb = "»",
        separator = "➜ ",
        group = "+",
    },
    window = {
        border = "none",
        position = "bottom",
        margin = { 1, 0, 1, 0 }, -- extra window margin [top, right, bottom, left]
        padding = { 1, 2, 1, 2 }, -- extra window padding [top, right, bottom, left]
    },
    layout = {
        height = { min = 3, max = 5 },
        width = { min = 20, max = 40 },
        spacing = 10,
        align = "center",
    },
    ignore_missing = false,
    hidden = { "<silent>", "<cmd>", "<Cmd>", "<CR>", "call", "lua", "^:", "^ "},
    show_help = true,
    triggers = {"<Leader>"},
    triggers_blacklist = {
        -- list of mode / prefixes that should never be hooked by WhichKey
        i = { "j", "k" },
        v = { "j", "k" }
    }
}

require("which-key").register({
  ["<leader>b"] = { name = "+buffer" },
  ["<leader>b1"] = { ":lua require'bufferline'.go_to_buffer(1)<CR>", "Go to buffer 1" },
  ["<leader>b2"] = { ":lua require'bufferline'.go_to_buffer(2)<CR>", "Go to buffer 2" },
  ["<leader>b3"] = { ":lua require'bufferline'.go_to_buffer(3)<CR>", "Go to buffer 3" },
  ["<leader>b4"] = { ":lua require'bufferline'.go_to_buffer(4)<CR>", "Go to buffer 4" },
  ["<leader>b5"] = { ":lua require'bufferline'.go_to_buffer(5)<CR>", "Go to buffer 5" },
  ["<leader>b6"] = { ":lua require'bufferline'.go_to_buffer(6)<CR>", "Go to buffer 6" },
  ["<leader>b7"] = { ":lua require'bufferline'.go_to_buffer(7)<CR>", "Go to buffer 7" },
  ["<leader>b8"] = { ":lua require'bufferline'.go_to_buffer(8)<CR>", "Go to buffer 8" },
  ["<leader>b9"] = { ":lua require'bufferline'.go_to_buffer(9)<CR>", "Go to buffer 9" },
  ["<leader>bp"] = { ":BufferLinePick<CR>", "Pick buffer" },
  ["<leader>F"] = { name = "+fold" },
  ["<leader>Fo"] = { ":foldopen<CR>", "Open fold" },
  ["<leader>Fq"] = { ":foldclose<CR>", "Close fold" },
  ["<leader>f"] = { name = "+find" },
  ["<leader>fd"] = { ":Dashboard<CR>", "Open Dashboard" },
  ["<leader>ff"] = { ":DashboardFindFile<CR>", "Find file" },
  ["<leader>fg"] = { ":DashboardFindWord<CR>", "Find word" },
  ["<leader>fh"] = { ":DashboardFindHistory<CR>", "Find history" },
  ["<leader>fn"] = { ":DashboardNewFile<CR>", "New file" },
  ["<leader>l"] = { name = "+lsp" },
  ["<leader>ld"] = { ":LspSaga preview_definition<CR>", "Go to definition" },
  ["<leader>lc"] = { ":lua vim.lsp.buf.declaration<CR>", "Go to decaration" },
  ["<leader>lr"] = { ":lua vim.lsp.buf.referencesCR>", "Go to references" },
  ["<leader>li"] = { ":lua vim.lsp.buf.implementationCR>", "Go to implementation" },
  ["<leader>la"] = { ":Lspsaga code_action<CR>", "Code action" },
  ["<leader>lh"] = { ":Lspsaga hover_doc<CR>", "Hover doc" },
  ["<leader>ls"] = { ":Lspsaga signature_help<CR>", "Signature help" },
  ["<leader>lj"] = { ":Lspsaga diagnostic_jump_next<CR>", "Next Diagnostic" },
  ["<leader>lk"] = { ":Lspsaga diagnostic_jump_prevCR>", "Previous diagnostic" },
  ["<leader>q"] = { name = "+quit/close" },
  ["<leader>qq"] = { ":q<CR>", "Quit" },
  ["<leader>qa"] = { ":qa<CR>", "Quit all" },
  ["<leader>qb"] = { ":Bdelete<CR>", "Close buffer" },
  ["<leader>qh"] = { ":set hlsearch!<CR>", "Remove search highlight" },
  ["<leader>s"] = { name = "+split" },
  ["<leader>sh"] = { ":split<CR>", "Horizontal split" },
  ["<leader>sv"] = { ":vsplit<CR>", "Vertical split" },
  ["<leader>t"] = { name = "+toggle" },
  ["<leader>te"] = { ":NvimTreeToggle<CR>", "Toggle NvimTree" },
  ["<leader>tr"] = { ":LspTroubleToggle<CR>", "Toggle LSPTrouble" },
  ["<leader>tt"] = { ":ToggleTerm<CR>", "Toggle Terminal" },
  ["<leader>w"] = { name = "+save/write" },
  ["<leader>ww"] = { ":w<CR>", "Write" },
  ["<leader>wq"] = { ":wq<CR>", "Write & quit" },
  ["<leader>wa"] = { ":wa<CR>", "Write all" },
})
